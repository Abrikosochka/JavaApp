package ui;

import model.Room;
import service.RoomService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.io.File;
import java.util.List;

public class RoomListFrame extends JFrame {
    private final RoomService roomService = new RoomService();
    private final DefaultTableModel model;
    private final JTable table;

    public RoomListFrame() {
        setTitle("–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤");
        setSize(900, 500);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        String[] columns = {"ID", "–ù–æ–º–µ—Ä", "–ü–ª–æ—â–∞–¥—å (–º¬≤)", "–ì–æ—Å—Ç–µ–π", "–§–æ—Ç–æ"};
        model = new DefaultTableModel(columns, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 4) return ImageIcon.class; // –∫–æ–ª–æ–Ω–∫–∞ "–§–æ—Ç–æ"
                return super.getColumnClass(columnIndex);
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        table = new JTable(model);
        table.setRowHeight(100); // –¥–µ–ª–∞–µ–º –ø–æ–±–æ–ª—å—à–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        table.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 14));

        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton refreshBtn = new JButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
        refreshBtn.addActionListener(e -> loadRooms());
        bottomPanel.add(refreshBtn);

        if (LoginFrame.isLoggedIn) {
            JButton addRoomBtn = new JButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä");
            addRoomBtn.addActionListener(e -> new AddRoomFrame(this).setVisible(true));
            bottomPanel.add(addRoomBtn);
        }

        add(bottomPanel, BorderLayout.SOUTH);
        loadRooms();
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
    public void loadRooms() {
        model.setRowCount(0); // –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        List<Room> rooms = roomService.getAllRooms();
        for (Room r : rooms) {
            ImageIcon imageIcon = null;
            if (r.getPhotoPath() != null && !r.getPhotoPath().isEmpty()) {
                File imgFile = new File(r.getPhotoPath());
                if (imgFile.exists()) {
                    // —É–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
                    ImageIcon icon = new ImageIcon(r.getPhotoPath());
                    Image img = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                    imageIcon = new ImageIcon(img);
                }
            }
            model.addRow(new Object[]{
                    r.getId(),
                    r.getRoomNumber(),
                    r.getArea(),
                    r.getGuests(),
                    imageIcon
            });
        }
    }
}
